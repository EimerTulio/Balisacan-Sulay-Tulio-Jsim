|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
| This sample .uasm program processes an array of integers and computes
| their total sum.
|
| Important notes:
| 1. For Lab 7, you are expected to mark the data portions of your program
|    using labels, as demonstrated below using the labels INPUT: and OUTPUT:.
| 2. While this sample program should work fine with most user inputs, there
|    is an edge case that will cause this program to fail catastrophically.
|    (Can you figure it out?)
|
| Happy hacking! - eric, ros, gab

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

.include beta.uasm                              | include the standard predefined macros

                LD(r31, ARRAY, r0)              | r0 = memory[r31 + ARRAY] (the array length N)
                                                | r0 = N
        
                ADDC(r31, 1, r1)                | r1 = 1
                                                | use r1 as pointer i
                                                | i = 1

whileBlock:     CMPLT(r1, r0, r2)               | while i < N
                BEQ(r2, done, r31)              | if false, end outer loop
                                                | if true, continue
                
                MULC(r1, 4, r3)                 | r3 = 4i
                LD(r3, ARRAY, r4)               | r4 contains arr[i]

                ADDC(r1, 1, r5)                 | r5 = r1 + 1
                                                | use r5 as pointer j
                                                | j = i + 1


innerWhile:     CMPLE(r5, r0, r6)               | while j <= N
                BEQ(r6, increment, r31)         | if false, end inner loop
                                                | if true, continue
                
                MULC(r5, 4, r7)                 | r7 = 4j
                LD(r7, ARRAY, r8)               | r8 contains arr[j]

                CMPLT(r8, r4, r9)               | check if arr[j] < arr[i]
                                                | r9 = result (yes or no)
                BEQ(r9, elseBlock, r31)         | if false, go to else
                                                | if true, continue (swap r4 and r8)
                
                ADD(r31, r4, r10)               | r10 is a temporary register
                                                | save the content of r4 (arr[i]) in temporary register
                ST(r8, ARRAY, r3)               | STORE contents of r8 into arr[i]
                ST(r10, ARRAY, r7)              | STORE contents of r10 into arr[j]
                LD(r3, ARRAY, r4)               | update r4 to contain new arr[i]

                ADDC(r5, 1, r5)                 | j++
                BR(innerWhile)                  | go back to inner while loop


elseBlock:      ADDC(r5, 1, r5)                 | since false, j++
                BR(innerWhile)                  | go back to inner while loop


increment:      ADDC(r1, 1, r1)                 | i++
                BR(whileBlock)                  | go back to outer loop
                

done:           HALT()


|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

| The "." statement changes the current memory location of any succeeding
| UASM macros, so that it is easy to locate in the BSim window.
| - If you omit this statement, the INPUT memory block would begin directly
|   after your program block.
| - You may need to adjust this memory location to make more memory space for
|   your data.

. = 0x19C

| INPUT marks the beginning of the memory block containing the hardcoded
| user "input".

ARRAY:
        LONG(7)             | <-- length of the array, N
        LONG(5)             | <-- first element of the array
        LONG(7)
        LONG(8)
        LONG(6)
        LONG(4)
        LONG(9)
        LONG(3)             | <-- last element of the array

| OUTPUT marks the memory block where the output will appear.
| Nothing follows the label because the output will be written by the program.
OUTPUT:
